# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
    tags:
      - v*
  pull_request:
    branches: [ "main" ]
    
env:
  CGO_ENABLED: 0
  

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Test
        run: go test -v ./...
        
  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: ["386", amd64, arm64]
        exclude:
          - goarch: "386"
            goos: darwin
          - goarch: arm64
            goos: windows
      
    steps:
      - uses: actions/checkout@v3
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Build ${{ matrix.goos }} ${{ matrix.goarch }}
        env:
            GOOS: ${{ matrix.goos }}
            GOARCH: ${{ matrix.goarch }}
        run: go build -v -o pms.${{ matrix.goos }}_${{ matrix.goarch }} ./cmd
      
      - name: Make pms.${{ matrix.goos }}_${{ matrix.goarch }}.tar.gz file
        run: tar -czvf pms.${{ matrix.goos }}_${{ matrix.goarch }}.tar.gz pms.${{ matrix.goos }}_${{ matrix.goarch }}
      
      - name: Upload pms_${{ matrix.goos }}_${{ matrix.goarch }}
        uses: actions/upload-artifact@v3
        with:
          name: compressed_files
          path: pms.${{ matrix.goos }}_${{ matrix.goarch }}.tar.gz
        
  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'

    steps:
      - name: Create release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
          
  assets:
    needs: release
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: ["386", amd64, arm64]
        exclude:
          - goarch: "386"
            goos: darwin
          - goarch: arm64
            goos: windows
    steps:
      - name: Download compressed files
        uses: actions/download-artifact@v3
        with:
          name: compressed_files
          
      - name: Upload artifacts to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/pms.${{ matrix.goos }}_${{ matrix.goarch }}.tar.gz
          asset_name: pms.${{ matrix.goos }}_${{ matrix.goarch }}.tar.gz
          asset_content_type: application/gzip
